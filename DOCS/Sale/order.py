import json
import pandas as pd
import requests
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from sqlalchemy import create_engine
import urllib


def get_cookies_from_browser(url):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –±—Ä–∞—É–∑–µ—Ä –∏ –ø–æ–ª—É—á–∞–µ—Ç cookies –ø–æ—Å–ª–µ —Ä—É—á–Ω–æ–≥–æ –≤—Ö–æ–¥–∞"""
    chrome_options = Options()
    chrome_options.add_argument("--start-maximized")
    driver = webdriver.Chrome(options=chrome_options)
    driver.get(url)
    input("üåê –ó–∞–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ Enter –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
    cookies = driver.get_cookies()
    driver.quit()
    return {cookie['name']: cookie['value'] for cookie in cookies}

def fetch_and_flatten(data_url):
    try:
        cookies = get_cookies_from_browser("https://smartup.online")
        print("‚¨áÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...")
        response = requests.get(data_url, cookies=cookies)
        response.raise_for_status()
        data = response.json()

        # –ï—Å–ª–∏ –ø—Ä–∏—à—ë–ª dict, –Ω–æ –≤–Ω—É—Ç—Ä–∏ –µ—Å—Ç—å —Å–ø–∏—Å–æ–∫ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤
        if isinstance(data, dict):
            # –∏—â–µ–º –ø–µ—Ä–≤—ã–π —Å–ø–∏—Å–æ–∫
            for key, value in data.items():
                if isinstance(value, list):
                    data = value
                    break
            else:
                raise ValueError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Å–ø–∏—Å–æ–∫ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ JSON")
        elif not isinstance(data, list):
            raise ValueError("‚ùå –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")



        # –ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ —ç—Ç–æ —Å–ø–∏—Å–æ–∫
        if not isinstance(data, list):
            print("üì¶ –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:")
            print(json.dumps(data, indent=2, ensure_ascii=False))
            raise ValueError("‚ùå –û–∂–∏–¥–∞–ª—Å—è —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ (–≤–æ–∑–≤—Ä–∞—Ç—ã), –Ω–æ –ø–æ–ª—É—á–µ–Ω –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç")

        # –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞: –≤–æ–∑–≤—Ä–∞—Ç—ã
        order_df = pd.json_normalize(data, sep="_", max_level=1)

        # –ü–æ–¥—Ç–∞–±–ª–∏—Ü–∞: return_products
        order_products_list = []
        for order in data:
            order_id = order.get("deal_id")
            for product in order.get("return_products", []):
                product["order_id"] = order_id
                order_products_list.append(product)
        order_products_df = pd.DataFrame(order_products_list)

        # –ü–æ–¥—Ç–∞–±–ª–∏—Ü–∞: details (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –≤–Ω—É—Ç—Ä–∏ return_products)
        details_list = []
        for product in order_products_list:
            product_id = product.get("product_unit_id")
            order_id = product.get("order_id")
            for detail in product.get("details", []):
                detail["product_id"] = product_id
                detail["order_id"] = order_id
                details_list.append(detail)
        details_df = pd.DataFrame(details_list)

        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ: {len(order_df)} –≤–æ–∑–≤—Ä–∞—Ç–æ–≤, {len(order_products_df)} —Ç–æ–≤–∞—Ä–æ–≤, {len(details_df)} –¥–µ—Ç–∞–ª–µ–π")
        return {
            "orders": order_df,
            "order_products": order_products_df,
            "order_details": details_df
        }

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}")
        return None

def upload_to_sql(df_dict):
    try:
        print("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQL Server...")
        params = urllib.parse.quote_plus(
            "DRIVER={ODBC Driver 17 for SQL Server};"
            "SERVER=localhost;"
            "DATABASE=Epco;"
            "Trusted_Connection=yes;"
            "TrustServerCertificate=yes;"
        )
        engine = create_engine(f"mssql+pyodbc:///?odbc_connect={params}")

        for table_name, df in df_dict.items():
            if df.empty or df.columns.empty:
                print(f"‚è≠ –¢–∞–±–ª–∏—Ü–∞ {table_name} –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç–æ–ª–±—Ü–æ–≤ ‚Äî –ø—Ä–æ–ø—É—â–µ–Ω–æ.")
                continue
            print(f"üì• –ó–∞–≥—Ä—É–∑–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü—É: {table_name} ({len(df)} —Å—Ç—Ä–æ–∫)")
            df.to_sql(table_name, con=engine, index=False, if_exists="replace")

        print("‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ SQL Server.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ SQL: {e}")


        for table_name, df in df_dict.items():
         if df.empty:
          print(f"‚è≠ –¢–∞–±–ª–∏—Ü–∞ {table_name} –ø—É—Å—Ç–∞ ‚Äî –ø—Ä–æ–ø—É—â–µ–Ω–æ.")
          continue
    print(f"üì• –ó–∞–≥—Ä—É–∑–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü—É: {table_name} ({len(df)} —Å—Ç—Ä–æ–∫)")
    df.to_sql(table_name, con=engine, index=False, if_exists="replace")


if __name__ == "__main__":
    DATA_URL = "https://smartup.online/b/trade/txs/tdeal/order$export"  # —Ç–≤–æ–π –∏—Å—Ö–æ–¥–Ω—ã–π URL
    df_dict = fetch_and_flatten(DATA_URL)
    if df_dict:
        upload_to_sql(df_dict)
